      <Route path='/about' element={<About/>}></Route>
      <Route path='/admin' element={<Admin/>}></Route>
      <Route path='/register' element={<Register/>}></Route>

                  <div className='mb-3'>
                <label htmlFor="image" className='form-label'>Image:</label>
                <input
                    type="file"
                    className='form-control'
                    id="image"
                    onChange={handleFileChange}
                />
            </div>

                                            <button className='btn btn-success' onClick={() => addToCart(item.id)}>
                                    Add To Cart
                                </button>

                                    const [cartId, setCartId] = useState('');

    useEffect(() => {
        
        const fetchCart = async () => {
            try {
                
                const existingCartId = localStorage.getItem('guestCartId');

                if (existingCartId) {
                    setCartId(existingCartId);
                } else {
                    
                    const response = await api.get('/carts'); 
                    const fetchedCartId = response.data.id;

                    
                    localStorage.setItem('guestCartId', fetchedCartId);

                    setCartId(fetchedCartId);
                }
            } catch (error) {
                console.error('Error fetching or creating cart:', error);
            }
        };

        fetchCart();
    }, []);

        const addToCart = async (itemId) => {
        try {
            const response = await api.post(`/carts/${cartId}/add_item/${itemId}`);
            const updatedCartId = response.data.cartId; 
            setCartId(updatedCartId);
        } catch (error) {
            console.error('Error adding item to cart:', error);
        }
    };
    
    api.interceptors.request.use(async (config) => {
  const csrfTokenMeta = document.querySelector('meta[name=csrf-token]');
  const csrfToken = csrfTokenMeta ? csrfTokenMeta.content : null;

  if (csrfToken) {
    config.headers['X-CSRF-Token'] = csrfToken;
  }

  return config;
});


    
    
