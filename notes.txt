                <div>
                    <label>Image:</label>
                    <input
                        type="file"
                        value={image}
                        onChange={(e) => setImage(e.target.value)}
                    />
                </div>
                <br />

                import "./item.css";
import React, { useState, useEffect } from 'react';
import api from '../services/api';

function Item() {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    bidstep: '',
    category: '',
    image: null,
  });

  const [auction, setAuction] = useState('');
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');

  useEffect(() => {
    const fetchAuctionId = async () => {
      try {
        const response = await api.get('/items');
        setAuction(response.data.auctionId);
      } catch (error) {
        console.error('Error fetching auctionId:', error);
      }
    };

    fetchAuctionId();
  }, []);

  const clearForm = () => {
    setFormData({
      name: '',
      description: '',
      price: '',
      bidstep: '',
      category: '',
      image: null,
    });
  };

  const handleFileChange = (e) => {
    setFormData({
      ...formData,
      image: e.target.files[0],
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);

    try {
      const data = new FormData();
      Object.entries(formData).forEach(([key, value]) => {
        data.append(key, value);
      });

      const response = await api.post('/items', data);
      const newAuctionId = response.data.id;
      setAuction(newAuctionId);
      setSuccessMessage('Item created successfully!');
      setError(null);
      console.log(response.data);
    } catch (error) {
      console.error('Error creating item:', error.response ? error.response.data : error.message);
      setError('Failed to create item. Please try again.');
      setSuccessMessage('');
    } finally {
      setSubmitting(false);
      clearForm();
    }
  };

  return (



import "./item.css";
import { Link, useNavigate } from "react-router-dom";
import React, { useState, useEffect, useRef } from 'react';
import api from '../services/api';

function Item() {
    const [name, setName] = useState('');
    const [description, setDescription] = useState('');
    const [price, setPrice] = useState('');
    const [bidstep, setBidstep] = useState('');
    const [category, setCategory] = useState('');
    const [image, setImage] = useState('');
    const [auction, setAuction] = useState('');
    const [submitting, setSubmitting] = useState(false);
    const [error, setError] = useState(null);
    const [successMessage, setSuccessMessage] = useState('');

    function clearForm() {
        setName('');
        setDescription('');
        setPrice('');
        setBidstep('');
        setCategory('');
        setImage('');
        setAuction(''); 

        const input = document.querySelector('input[type="file"]');
        if (input) {
        input.value = ''; 
        }
    }

    useEffect(() => {
        const fetchAuctionId = async () => {
            try {
                const response = await api.get('/items'); 
                setAuction(response.data.auctionId);
            } catch (error) {
                console.error('Error fetching auctionId:', error);
            }
        };

        fetchAuctionId(); 
    }, []);

    function handleSubmit(e) {
        e.preventDefault();
        setSubmitting(true);
        api.post('/items', { name, description, price, bidstep, category, image, auction }).then((response) => {
            const newAuctionId = response.data.id;
            setAuction(newAuctionId);
            setSuccessMessage('Item created successfully!');
            setError(null);
            console.log(response.data);
        })
            .catch((error) => {
                console.error('Error creating item:', error.response.data);
                setError('Failed to create item. Please try again.');
                setSuccessMessage('');
            })
            .finally(() => {
                setSubmitting(false);
                clearForm();
            });
    };


    return (
        <div>
            <h2>Add Item</h2>
            <form id="itemForm" onSubmit={handleSubmit}>
                <label>Name:</label>
                <input
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                />
                <br />

                <label>Description:</label>
                <input
                    type="text"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                />
                <br />

                <label>Price:</label>
                <input
                    type="number" placeholder='$'
                    value={price}
                    onChange={(e) => setPrice(e.target.value)}
                />
                <br />

                <label>Bid Increment:</label>
                <input
                    type="number" placeholder='$'
                    value={bidstep}
                    onChange={(e) => setBidstep(e.target.value)}
                />
                <br />

                <label>Category:</label>
                <input
                    type="text"
                    value={category}
                    onChange={(e) => setCategory(e.target.value)}
                />
                <br />

                <label>Image:</label>
                <input
                    type="file"
                    onChange={(e) => setImage(e.target.files[0])}
                />
                <br />


                <button type="submit" disabled={submitting}>Submit</button>
                {error && <p style={{ color: 'red' }}>{error}</p>}
                {successMessage && <p style={{ color: 'green' }}>{successMessage}</p>}
            </form>
        </div>
    );
}


export default Item;


import "./item.css";
import React, { useState, useEffect } from 'react';
import api from '../services/api';

function Item() {
    const [formData, setFormData] = useState({
        name: '',
        description: '',
        price: '',
        bidstep: '',
        category: '',
        image: null,
        auction: '',
    });

    const [auction, setAuction] = useState('');
    const [submitting, setSubmitting] = useState(false);
    const [error, setError] = useState(null);
    const [successMessage, setSuccessMessage] = useState('');

    useEffect(() => {
        const fetchAuctionId = async () => {
            try {
                const response = await api.get('/items');
                setAuction(response.data.auctionId);
            } catch (error) {
                console.error('Error fetching auctionId:', error);
            }
        };

        fetchAuctionId();
    }, []);

    const clearForm = () => {
        setFormData({
            name: '',
            description: '',
            price: '',
            bidstep: '',
            category: '',
            image: null,
        });
    };

    const handleFileChange = (e) => {
        setFormData({
            ...formData,
            image: e.target.files[0],
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setSubmitting(true);

        const { name, description, price, bidstep, category, image, auction } = formData;

        api.post('/items', { name, description, price, bidstep, category, image, auction })
          .then((response) => {
            const newAuctionId = response.data.id;
            setFormData({ ...formData, auction: newAuctionId }); // Update auction in formData
            setSuccessMessage('Item created successfully!');
            setError(null);
            console.log(response.data);
          })
          .catch((error) => {
            console.error('Error creating item:', error.response.data);
            setError('Failed to create item. Please try again.');
            setSuccessMessage('');
          })
          .finally(() => {
            setSubmitting(false);
            clearForm();
          });
      };

        try {
            const data = new FormData();
            Object.entries(formData).forEach(([key, value]) => {
                data.append(key, value);
            });

            const response = await api.post('/items', data);
            const newAuctionId = response.data.id;
            setAuction(newAuctionId);
            setSuccessMessage('Item created successfully!');
            setError(null);
            console.log(response.data);
        } catch (error) {
            console.error('Error creating item:', error.response ? error.response.data : error.message);
            setError('Failed to create item. Please try again.');
            setSuccessMessage('');
        } finally {
            setSubmitting(false);
            clearForm();
        }
    };

    return (
        <div>
            <h2>Add Item</h2>
            <form id="itemForm" onSubmit={handleSubmit}>
                <label>Name:</label>
                <input
                    type="text"
                    value={formData.itemName}
                    onChange={(e) => setFormData({ ...formData, itemName: e.target.value })}
                />
                <br />

                <label>Description:</label>
                <input
                    type="text"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                />
                <br />

                <label>Price:</label>
                <input
                    type="number" placeholder='$'
                    value={price}
                    onChange={(e) => setPrice(e.target.value)}
                />
                <br />

                <label>Bid Increment:</label>
                <input
                    type="number" placeholder='$'
                    value={bidstep}
                    onChange={(e) => setBidstep(e.target.value)}
                />
                <br />

                <label>Category:</label>
                <input
                    type="text"
                    value={category}
                    onChange={(e) => setCategory(e.target.value)}
                />
                <br />

                <label>Image:</label>
                <input type="file" onChange={handleFileChange} />
                <br />

                <button type="submit" disabled={submitting}>
                    Submit
                </button>
                {error && <p style={{ color: 'red' }}>{error}</p>}
                {successMessage && <p style={{ color: 'green' }}>{successMessage}</p>}
            </form>
        </div>
    );

export default Item;

import React, { useState } from "react";
import api from "../services/api";
import "./create.css";
import { Link } from "react-router-dom";

function Create() {
    const [title, setTitle] = useState("");
    const [goal, setGoal] = useState("");
    const [startdate, setStartdate] = useState("");
    const [enddate, setEnddate] = useState("");
    const [starttime, setStarttime] = useState("");
    const [endtime, setEndtime] = useState("");
    const [description, setDescription] = useState("");
    const [image, setImage] = useState("");

    function handleSubmit(e) {
        e.preventDefault();
        api
            .post("/auctions", {
                title,
                goal,
                startdate,
                enddate,
                starttime,
                endtime,
                description,
            })
            .then((response) => {
                console.log(response.data);
            })
            .catch((error) => {
                console.error("Error creating article:", error);
            });
    }

    
    const handleSubmit = async (e) => {
        e.preventDefault();
        setSubmitting(true);

        try {
            const data = new FormData();
            Object.entries(formData).forEach(([key, value]) => {
                data.append(key, value);
            });

            const response = await api.post('/items', data);
            const newAuctionId = response.data.id;
            setFormData(prevData => ({ ...prevData, auction: newAuctionId }));
            setSuccessMessage('Item created successfully!');
            setError(null);
            console.log(response.data);
        } catch (error) {
            console.error('Error creating item:', error.response ? error.response.data : error.message);
            setError('Failed to create item. Please try again.');
            setSuccessMessage('');
        } finally {
            setSubmitting(false);
            clearForm();
        }
    };



    const handleSubmit = async (e) => {
        e.preventDefault();
        setSubmitting(true);
    
        try {
            const { name, description, price, bidstep, category, image, auction } = formData;
    
            const response = await api.post('/items', { name, description, price, bidstep, category, image, auction });
            
            const newAuctionId = response.data.id;
            setFormData(prevData => ({ ...prevData, auction: newAuctionId }));
            setSuccessMessage('Item created successfully!');
            setError(null);
            console.log(response.data);
        } catch (error) {
            console.error('Error creating item:', error.response ? error.response.data : error.message);
            setError('Failed to create item. Please try again.');
            setSuccessMessage('');
        } finally {
            setSubmitting(false);
            clearForm();
        }
    };

    import React, { useState } from "react";
import api from "../services/api";
import "./create.css";
import { Link } from "react-router-dom";

function Create() {
    const [title, setTitle] = useState("");
    const [goal, setGoal] = useState("");
    const [startdate, setStartdate] = useState("");
    const [enddate, setEnddate] = useState("");
    const [starttime, setStarttime] = useState("");
    const [endtime, setEndtime] = useState("");
    const [description, setDescription] = useState("");
    const [image, setImage] = useState("");
    const [error, setError] = useState(null);

    function handleSubmit(e) {
        e.preventDefault();
        api
            .post("/auctions", {
                title,
                goal,
                startdate,
                enddate,
                starttime,
                endtime,
                description,
            })
            .then((response) => {
                console.log(response.data);
            })
            .catch((error) => {
                console.error("Error creating auction:", error);
                setError("Failed to create auction. Please try again.");
            });
    }

                            <li className="nav-item">
                            <Link className="nav-link active" aria-current="page" to="/item">Item</Link>
                        </li>
                        <li className="nav-item">
                            <Link className="nav-link active" aria-current="page" to="/show">Show</Link>
                        </li>
                        <li className="nav-item dropdown">
                            <Link className="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Dropdown
                            </Link>
                            <ul className="dropdown-menu">
                                <li><Link className="dropdown-item" href="#">Action</Link></li>
                                <li><Link className="dropdown-item" href="#">Another action</Link></li>
                                <li><hr className="dropdown-divider"/></li>
                                <li><Link className="dropdown-item" href="#">Something else here</Link></li>
                            </ul>
                        </li>
                        <li className="nav-item">
                            <Link className="nav-link disabled" aria-disabled="true">Disabled</Link>
                        </li>

                        import React, { useState } from "react";
import api from "../services/api";
import "./about.css";
import { Link } from "react-router-dom";

import ArticleList from '../components/ArticleList';
import ArticleForm from '../components/ArticleForm';
import ArticleUpdate from '../components/ArticleUpdate';
import ArticleDelete from '../components/ArticleDelete';

function About(){
    return (

<div>
<ArticleList />
<ArticleForm />
<ArticleUpdate article={{ id: 1, title: 'Example', content: 'Example Content' }} />
<ArticleDelete articleId={1} />
</div>

    );
}

export default About;







import "./detail.css";
import { Link } from "react-router-dom";
import React, { useState, useEffect } from 'react';
import api from '../services/api';

function Detail({ auctionId }) {
    const [details, setDetail] = useState([]);

    useEffect(() => {
        api.get(`/auctions/${auctionId}`)
            .then((response) => {
                setDetail(response.data);
            })
            .catch((error) => {
                console.error("Error fetching auction details:", error);
            });
    }, [auctionId]);
    

    return (
        <div>
            <h2>Auctions</h2>
            <ul>
                {Array.isArray(details) && details.map((detail) => (
                    <li key={detail.id}>
                        {detail.title} - {detail.goal}
                        {detail.startdate} - {detail.starttime}
                        {detail.enddate} - {detail.endtime}
                        {detail.description} - {detail.image}
                    </li>
                ))}
            </ul>
        </div>
    );
    
}

export default Detail;


import "./item.css";
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import { useNavigate } from "react-router-dom";

function Item({ auctionId }) {
    const next = useNavigate();
    const [formData, setFormData] = useState({
        name: '',
        description: '',
        price: '',
        bidstep: '',
        category: '',
        image: null,
        auctionId: '',
    });

    const [submitting, setSubmitting] = useState(false);
    const [error, setError] = useState(null);
    const [successMessage, setSuccessMessage] = useState('');

    useEffect(() => {
        const fetchAuctionId = async () => {
            try {
                if (auctionId) {
                    const response = await api.get(`/auctions/${auctionId}`);
                    setFormData(prevData => ({ ...prevData, auctionId: response.data.id }));
                }
            } catch (error) {
                console.error('Error fetching auctionId:', error);
            }
        };
        
    
        fetchAuctionId();
    }, [auctionId]);
    

    const clearForm = () => {
        setFormData({
            name: '',
            description: '',
            price: '',
            bidstep: '',
            category: '',
            image: null,
            auctionId: '',
        });
    };

    const handleFileChange = (e) => {
        setFormData({
            ...formData,
            image: e.target.files[0],
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setSubmitting(true);
    
        try {
            const { name, description, price, bidstep, category, image, auctionId } = formData;
    
            const formDataInstance = new FormData();
            formDataInstance.append('name', name);
            formDataInstance.append('description', description);
            formDataInstance.append('price', price);
            formDataInstance.append('bidstep', bidstep);
            formDataInstance.append('category', category);
            formDataInstance.append('image', image);
            formDataInstance.append('auctionId', auctionId);
    
            console.log("Form Data:", formData);
    
            const response = await api.post('/items', formDataInstance, {
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
            });
    
            console.log("Response:", response);
    
            const newAuctionId = response.data.id;
            setFormData(prevData => ({ ...prevData, auctionId: newAuctionId }));
            setSuccessMessage('Item created successfully!');
            setError(null);
            console.log(response.data);
        } catch (error) {
            console.error("Error:", error); // Log the complete error for debugging
    
            if (error.response) {
                console.error("Server responded with error status:", error.response.status);
                console.error("Validation errors:", error.response.data.errors);
                setError(error.response.data.errors);
            } else if (error.request) {
                console.error("No response received from the server");
            } else {
                console.error("Error setting up the request:", error.message);
            }
        } finally {
            setSubmitting(false);
            clearForm();
        };
    };
    

    return (
        <div>
            <h2>Add Item</h2>
            <form id="itemForm" onSubmit={handleSubmit}>
                <label>Name:</label>
                <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                />
                <br />

                <label>Description:</label>
                <input
                    type="text"
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                />
                <br />

                <label>Price:</label>
                <input
                    type="number" placeholder='$'
                    value={formData.price}
                    onChange={(e) => setFormData({ ...formData, price: e.target.value })}
                />
                <br />

                <label>Bid Increment:</label>
                <input
                    type="number" placeholder='$'
                    value={formData.bidstep}
                    onChange={(e) => setFormData({ ...formData, bidstep: e.target.value })}
                />
                <br />

                <label>Category:</label>
                <input
                    type="text"
                    value={formData.category}
                    onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                />
                <br />

                <label>Image:</label>
                <input type="file" onChange={handleFileChange} />
                <br />

                <button type="submit" disabled={submitting}>
                    Submit
                </button>
                {error && <p style={{ color: 'red' }}>{error}</p>}
                {successMessage && <p style={{ color: 'green' }}>{successMessage}</p>}
            </form>
        </div>
    );
}

export default Item;

import React, { useState, useEffect } from "react";
import api from "../services/api";
import "./create.css";
import Item from './item';
import Detail from './detail';
import { useNavigate } from "react-router-dom";


function Create() {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        title: "",
        goal: "",
        startdate: "",
        enddate: "",
        starttime: "",
        endtime: "",
        description: "",
        image: "",
        error: null,
        auctionId: null,
    });

    const { title, goal, startdate, enddate, starttime, endtime, description, image, error, auctionId } = formData;

    const handleSubmit = (e) => {
        e.preventDefault();
        api.post("/auctions", {
            title,
            goal,
            startdate,
            enddate,
            starttime,
            endtime,
            description,
            image,
            auctionId
        })
        .then((response) => {
            setFormData(prevData => ({ ...prevData, auctionId: response.data.id }));
            console.log(response.data);
            navigate('/item');
        })
        .catch((error) => {
            console.error("Error creating auction:", error);
            setFormData(prevData => ({ ...prevData, error: "Failed to create auction. Please try again." }));
            
        });
        
    }
    

    useEffect(() => {
        const fetchAuctionId = async () => {
            try {
                if (auctionId) {
                    const response = await api.get(`/auctions/${auctionId}`);
                    setFormData(prevData => ({ ...prevData, auctionId: response.data.id }));
                }
            } catch (error) {
                console.error('Error fetching auctionId:', error);
            }
        };
        
    
        fetchAuctionId();
    }, [auctionId]);
    

    const handleFileChange = (e) => {
        setFormData({
            ...formData,
            image: e.target.files[0],
        });
    };

    return (
        <div>
            <h2>Add Auction</h2>
            {error && <p style={{ color: "red" }}>{error}</p>}
            <form onSubmit={handleSubmit}>
            <label>Title:</label>
                <input
                    type="text"
                    value={formData.title}
                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                />
                <br />

                <br/>
                <div>
                    <label>Goal:</label>
                    <input
                        type="number" placeholder="$"
                        value={formData.goal}
                        onChange={(e) => setFormData({ ...formData, goal: e.target.value })}
                    />
                </div>
                <br />
                <div>
                    <label>Start Date:</label>
                    <input
                        type="date"
                        value={formData.startdate}
                        onChange={(e) => setFormData({ ...formData, startdate: e.target.value })}
                    />
                </div>
                <br />
                <div>
                    <label>End Date:</label>
                    <input
                        type="date"
                        value={formData.enddate}
                        onChange={(e) => setFormData({ ...formData, enddate: e.target.value })}
                    />
                </div>
                <br />
                <div>
                    <label>Start Time:</label>
                    <input
                        type="time"
                        value={formData.starttime}
                        onChange={(e) => setFormData({ ...formData, starttime: e.target.value })}
                    />
                </div>
                <br />
                <div>
                    <label>End Time:</label>
                    <input
                        type="time"
                        value={formData.endtime}
                        onChange={(e) => setFormData({ ...formData, endtime: e.target.value })}
                    />
                </div>
                <br />
                <div>
                    <label>Description:</label>
                    <input
                        type="text"
                        value={formData.description}
                        onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    />
                </div>
                <br />

                <label>Image:</label>
                <input type="file" onChange={handleFileChange} />
                <br />

                <button type="submit">Submit</button>
            </form>

            {/* Pass Auction ID as prop to Item component */}
            {auctionId && <Item auctionId={auctionId} />}

            {/* Pass Auction ID as prop to Detail component */}
            {auctionId && <Detail auctionId={auctionId} />}
        </div>
    );
}

export default Create;